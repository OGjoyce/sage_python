Crank-Nicolson 1D
system:sage


{{{id=3|
@interact
def _(N=51, dt=5.e-4, L=float(1), nsteps=620, nplot=20, k=1, dx = L/(n-1)):
    r = k*dt/dx**2
///
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "_sage_input_11.py", line 10, in <module>
    exec compile(u'open("___code___.py","w").write("# -*- coding: utf-8 -*-\\n" + _support_.preparse_worksheet_cell(base64.b64decode("QGludGVyYWN0CmRlZiBfKE49NTEsIGR0PTUuZS00LCBMPWZsb2F0KDEpLCBuc3RlcHM9NjIwLCBucGxvdD0yMCwgaz0xLCBkeCA9IEwvKG4tMSkpOgogICAgciA9IGsqZHQvZHgqKjI="),globals())+"\\n"); execfile(os.path.abspath("___code___.py"))' + '\n', '', 'single')
  File "", line 1, in <module>
    
  File "/tmp/tmpjF3Cdq/___code___.py", line 4, in <module>
    def _(N=_sage_const_51 , dt=_sage_const_5pen4 , L=float(_sage_const_1 ), nsteps=_sage_const_620 , nplot=_sage_const_20 , k=_sage_const_1 , dx = L/(n-_sage_const_1 )):
NameError: name 'L' is not defined
}}}

{{{id=1|
import numpy as np
#funcion para animar
list_to_animate = []
def animar(A):
    list_to_animate.append(A)
#definition of numerical parameters
print "N = numero de puntos en la cuadricula"
print "dt = tiempo"
print "L = Tamano de la cuadricula"
print "nsteps = numero de pasos en el tiempo"
print "dx = espacio en la cuadricula eje x"
print "nplot = numero de pasos en el tiempo para plotear"
print "k = coeficiente de difusion"
#initialize matrices A, B and b array
A = np.zeros((N-2,N-2))
B = np.zeros((N-2,N-2))
b = np.zeros((N-2))
#define matrices A, B and b array
for i in range(N-2):
    if i==0:
        A[i,:] = [2+2*r if j==0 else (-r) if j==1 else 0 for j in range(N-2)]
        B[i,:] = [2-2*r if j==0 else r if j==1 else 0 for j in range(N-2)]
        b[i] = 0. #boundary condition at i=1
    elif i==N-3:
        A[i,:] = [-r if j==N-4 else 2+2*r if j==N-3 else 0 for j in range(N-2)]
        B[i,:] = [r if j==N-4 else 2-2*r if j==N-3 else 0 for j in range(N-2)]
        b[i] = 0. #boundary condition at i=N
    else:
        A[i,:] = [-r if j==i-1 or j==i+1 else 2+2*r if j==i else 0 for j in range(N-2)]
        B[i,:] = [r if j==i-1 or j==i+1 else 2-2*r if j==i else 0 for j in range(N-2)]
#initialize grid
x = np.linspace(0,1,N)
#initial condition
u = np.asarray([2*xx if xx<=0.5 else 2*(1-xx) for xx in x])
#evaluate right hand side at t=0
bb = B.dot(u[1:-1]) + b
for j in range(nsteps):
    u[1:-1] = np.linalg.solve(A,bb) #solucion en dominio
    #update en lado derecho
    bb = B.dot(u[1:-1]) + b
    if(j%nplot==0): #plot results every nplot timesteps
        S = list_plot(zip(x.tolist(), u.tolist()),ymax=1)
        animar(S)
animate(list_to_animate)
///
<html><!--notruncate-->
        <div padding=6 id="div-interact-1">
          <table width=800px height=20px bgcolor="#c5c5c5" cellpadding=15>
            <tr>
              <td bgcolor="#f9f9f9" valign=top align=left>
            <table>
              <tr><td colspan=3><table><tr><td align=right><font color="black">N&nbsp;</font></td><td><input type="text" value="51" size=80 onchange="interact(1, {variable: 'N', adapt_number: 13, value: encode64(this.value)}, 1)"></input></td>
</tr><tr><td align=right><font color="black">dt&nbsp;</font></td><td><input type="text" value="0.000500000000000000" size=80 onchange="interact(1, {variable: 'dt', adapt_number: 14, value: encode64(this.value)}, 1)"></input></td>
</tr><tr><td align=right><font color="black">L&nbsp;</font></td><td><input type="text" value="1.0" size=80 onchange="interact(1, {variable: 'L', adapt_number: 15, value: encode64(this.value)}, 1)"></input></td>
</tr><tr><td align=right><font color="black">nsteps&nbsp;</font></td><td><input type="text" value="620" size=80 onchange="interact(1, {variable: 'nsteps', adapt_number: 16, value: encode64(this.value)}, 1)"></input></td>
</tr><tr><td align=right><font color="black">nplot&nbsp;</font></td><td><input type="text" value="20" size=80 onchange="interact(1, {variable: 'nplot', adapt_number: 17, value: encode64(this.value)}, 1)"></input></td>
</tr><tr><td align=right><font color="black">k&nbsp;</font></td><td><input type="text" value="1" size=80 onchange="interact(1, {variable: 'k', adapt_number: 18, value: encode64(this.value)}, 1)"></input></td>
</tr></table></td></tr>
              <tr><td></td><td style='width: 100%;'>
        <div id="cell-interact-1"><?__SAGE__START>
          <table border=0 bgcolor="white" width=100%>
            <tr>
              <td bgcolor="white" align=left valign=top>
                <pre><?__SAGE__TEXT></pre>
              </td>
            </tr>
            <tr>
              <td align=left valign=top><?__SAGE__HTML></td>
            </tr>
          </table><?__SAGE__END>
        </div></td><td></td></tr>
              <tr><td colspan=3></td></tr>
            </table></td>
            </tr>
          </table>
        </div></html>
N = numero de puntos en la cuadricula
dt = tiempo
L = Tamano de la cuadricula
nsteps = numero de pasos en el tiempo
dx = espacio en la cuadricula eje x
nplot = numero de pasos en el tiempo para plotear
k = coeficiente de difusion
Traceback (most recent call last):    list_to_animate = []
  File "", line 1, in <module>
    
  File "/tmp/tmpNDRfvy/___code___.py", line 21, in <module>
    A = np.zeros((N-_sage_const_2 ,N-_sage_const_2 ))
  File "sage/structure/element.pyx", line 1666, in sage.structure.element.RingElement.__sub__ (/home/carlos/Downloads/SageMath/src/build/cythonized/sage/structure/element.c:16025)
  File "sage/structure/coerce.pyx", line 1069, in sage.structure.coerce.CoercionModel_cache_maps.bin_op (/home/carlos/Downloads/SageMath/src/build/cythonized/sage/structure/coerce.c:9736)
TypeError: unsupported operand parent(s) for '-': '<type 'function'>' and 'Integer Ring'
}}}

{{{id=2|

///
}}}